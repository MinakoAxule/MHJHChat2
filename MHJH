/
â”œâ”€â”€ package.json
â”œâ”€â”€ server.js
â”œâ”€â”€ Procfile
â”œâ”€â”€ koyeb.yaml
â”œâ”€â”€ .gitignore
â””â”€â”€ public/
    â”œâ”€â”€ index.html
    â”œâ”€â”€ style.css
    â””â”€â”€ script.js
{
  "name": "mhjhchat2",
  "version": "1.0.0",
  "description": "Real-time chat app with nicknames, emojis, and online user tracking",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.19.2",
    "socket.io": "^4.7.5"
  },
  "engines": {
    "node": ">=18"
  }
}
import express from "express";
import http from "http";
import { Server } from "socket.io";

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static("public"));

// Random discriminator like #0000
function randomDiscriminator() {
  return "#" + Math.floor(1000 + Math.random() * 9000);
}

const users = {};

io.on("connection", (socket) => {
  console.log("ðŸŸ¢ Connected:", socket.id);

  socket.on("join", (nickname) => {
    const tag = randomDiscriminator();
    users[socket.id] = { nickname, tag };
    io.emit("user-joined", { nickname, tag });
    io.emit("user-list", Object.values(users));
    console.log(`ðŸ‘¤ ${nickname}${tag} joined`);
  });

  socket.on("chat-message", (data) => {
    const cleanMsg = String(data.msg).substring(0, 500);
    io.emit("chat-message", { nickname: data.nickname, msg: cleanMsg });
  });

  socket.on("typing", (nickname) => {
    socket.broadcast.emit("typing", nickname);
  });

  socket.on("disconnect", () => {
    const user = users[socket.id];
    if (user) {
      delete users[socket.id];
      io.emit("user-left", user);
      io.emit("user-list", Object.values(users));
      console.log(`ðŸ”´ ${user.nickname}${user.tag} left`);
    }
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`âœ… Server running on port ${PORT}`));
import express from "express";
import http from "http";
import { Server } from "socket.io";

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static("public"));

// Random discriminator like #0000
function randomDiscriminator() {
  return "#" + Math.floor(1000 + Math.random() * 9000);
}

const users = {};

io.on("connection", (socket) => {
  console.log("ðŸŸ¢ Connected:", socket.id);

  socket.on("join", (nickname) => {
    const tag = randomDiscriminator();
    users[socket.id] = { nickname, tag };
    io.emit("user-joined", { nickname, tag });
    io.emit("user-list", Object.values(users));
    console.log(`ðŸ‘¤ ${nickname}${tag} joined`);
  });

  socket.on("chat-message", (data) => {
    const cleanMsg = String(data.msg).substring(0, 500);
    io.emit("chat-message", { nickname: data.nickname, msg: cleanMsg });
  });

  socket.on("typing", (nickname) => {
    socket.broadcast.emit("typing", nickname);
  });

  socket.on("disconnect", () => {
    const user = users[socket.id];
    if (user) {
      delete users[socket.id];
      io.emit("user-left", user);
      io.emit("user-list", Object.values(users));
      console.log(`ðŸ”´ ${user.nickname}${user.tag} left`);
    }
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`âœ… Server running on port ${PORT}`));
const socket = io();
const loginScreen = document.getElementById("login-screen");
const chatScreen = document.getElementById("chat-screen");
const nicknameInput = document.getElementById("nickname");
const joinBtn = document.getElementById("join-btn");
const chatBox = document.getElementById("chat-box");
const messageInput = document.getElementById("message");
const sendBtn = document.getElementById("send-btn");
const typingDisplay = document.getElementById("typing");
const onlineUsers = document.getElementById("online-users");

let nickname = "";

joinBtn.onclick = () => {
  nickname = nicknameInput.value.trim();
  if (nickname) {
    socket.emit("join", nickname);
    loginScreen.classList.add("hidden");
    chatScreen.classList.remove("hidden");
  }
};

sendBtn.onclick = sendMessage;
messageInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter") sendMessage();
  else socket.emit("typing", nickname);
});

function sendMessage() {
  const msg = messageInput.value.trim();
  if (msg) {
    socket.emit("chat-message", { nickname, msg });
    messageInput.value = "";
  }
}

socket.on("chat-message", (data) => {
  const div = document.createElement("div");
  div.classList.add("message");
  if (data.nickname === nickname) div.classList.add("self");
  div.innerHTML = `<strong>${data.nickname}:</strong> ${data.msg}`;
  chatBox.appendChild(div);
  chatBox.scrollTop = chatBox.scrollHeight;
});

socket.on("user-joined", (user) => {
  const div = document.createElement("div");
  div.classList.add("message");
  div.innerHTML = `ðŸŸ¢ <em>${user.nickname}${user.tag} joined the chat</em>`;
  chatBox.appendChild(div);
});

socket.on("user-left", (user) => {
  const div = document.createElement("div");
  div.classList.add("message");
  div.innerHTML = `ðŸ”´ <em>${user.nickname}${user.tag} left the chat</em>`;
  chatBox.appendChild(div);
});

socket.on("user-list", (users) => {
  onlineUsers.innerHTML = `Online: ${users.map(u => `${u.nickname}${u.tag}`).join(", ")}`;
});

socket.on("typing", (user) => {
  typingDisplay.textContent = `${user} is typing...`;
  setTimeout(() => (typingDisplay.textContent = ""), 1500);
});
body {
  font-family: Arial, sans-serif;
  background: linear-gradient(120deg, #1e1e1e, #2c2c2c);
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}

.hidden {
  display: none;
}

#login-screen, #chat-screen {
  width: 90%;
  max-width: 600px;
  background: #222;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 0 20px rgba(0,0,0,0.4);
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

#chat-box {
  height: 400px;
  overflow-y: auto;
  background: #111;
  border-radius: 10px;
  padding: 10px;
  margin: 10px 0;
}

.message {
  background: #333;
  border-radius: 10px;
  margin: 6px 0;
  padding: 8px 12px;
  word-wrap: break-word;
}

.message.self {
  background: #0059ff;
  align-self: flex-end;
}

footer {
  display: flex;
}

#message {
  flex: 1;
  padding: 10px;
  border: none;
  border-radius: 10px;
}

#send-btn {
  background: #4caf50;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 10px;
  margin-left: 8px;
  cursor: pointer;
}
web: node server.js
name: mhjhchat2
type: web
build:
  type: buildpack
run:
  cmd: npm start
node_modules
.env
.DS_Store
